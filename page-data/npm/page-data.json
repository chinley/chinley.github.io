{"componentChunkName":"component---src-templates-blog-post-js","path":"/npm/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"e5936b24-44a3-5283-9411-317ca2473607","excerpt":"npm安装机制与企业级部署私服原理 npm内部机制和核心原理   优先安装依赖到当前的项目目录，使得不同项目依赖自成体系。   npm安装流程：   1.执行npm install后，首先检查npm配置。npm配置文件优先级：项目级.npmrc > 用户级.npmrc > 全局级.npmrc > npm…","html":"<h1>npm安装机制与企业级部署私服原理</h1>\n<h2>npm内部机制和核心原理</h2>\n<p>  优先安装依赖到当前的项目目录，使得不同项目依赖自成体系。</p>\n<p>  npm安装流程：</p>\n<p>  1.执行npm install后，首先检查npm配置。npm配置文件优先级：项目级.npmrc > 用户级.npmrc > 全局级.npmrc > npm内置的.npmrc</p>\n<p>  2.检查完配置后，检查package-lock.json文件是否和package.json文件声明的依赖一致：</p>\n<p>   a.一致，直接使用package-lock.json文件，从缓存或者网络中加载依赖</p>\n<p>   b.不一致，按照npm版本处理，不同版本处理方式不同。</p>\n<p>  3.如果没有package-lock.json文件，则根据packge,json构建递归依赖树，按照依赖树下载资源，在下载过程中就会检查是否有相关资源缓存。</p>\n<p>   a.存在缓存资源，将缓存资源解压到node_modules中</p>\n<p>   b.不存在，从npm下载包，检验包的完整，添加到缓存中，并解压到node_modules.</p>\n<p>  最后生成packge-lock.json文件</p>\n<h2>npm link 本地调试包在项目中的可用性</h2>","frontmatter":{"title":"前端基础建设与架构","date":"June 10, 2021","description":"学习笔记: npm安装机制与企业级部署私服原理"}},"previous":{"fields":{"slug":"/leetcode/"},"frontmatter":{"title":"最长回文字符串"}},"next":{"fields":{"slug":"/leetcode/path/"},"frontmatter":{"title":"路径问题"}}},"pageContext":{"id":"e5936b24-44a3-5283-9411-317ca2473607","previousPostId":"77c388e5-7ccf-515d-ad60-f84d5d103439","nextPostId":"70e049d3-723d-546b-be1d-1daeac35f30f"}},"staticQueryHashes":["2841359383","788015585"]}