{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/模块化/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"6abe76b5-490d-59f6-a195-0f2455825bc0","excerpt":"文章导读 「从构建产物洞悉模块化原理」- 不要秃头啊\nhttps://juejin.cn/post/7147365025047379981/ 相关问题 模块化的产生是为了解决什么问题？在什么场景下诞生的 Web环境中是如何支持模块化的？加载过程时怎么样的 CommonJS可以加载ES Module导出的内容吗 ES…","html":"<h5>文章导读</h5>\n<p>「从构建产物洞悉模块化原理」- 不要秃头啊\n<a href=\"https://juejin.cn/post/7147365025047379981/\">https://juejin.cn/post/7147365025047379981/</a></p>\n<p>相关问题</p>\n<ul>\n<li>模块化的产生是为了解决什么问题？在什么场景下诞生的</li>\n<li>Web环境中是如何支持模块化的？加载过程时怎么样的</li>\n<li>CommonJS可以加载ES Module导出的内容吗</li>\n<li>ES Module可以加载CommonJS 导出的内容吗</li>\n<li>Webpack内部如何区分一个模块是采用哪种模块化规范</li>\n<li>一个模块内可以既使用CommonJS，又使用 ES Module 吗？</li>\n</ul>\n<h4>模块化发展历史</h4>\n<p>  早期JavaScript开发很容易存在<strong>全局污染</strong>和<strong>依赖管理</strong>混乱问题。每个加载的js文件都共享变量。</p>\n<p>  后来可以使用<strong>匿名函数自执行的方式，形成独立的块级作用域</strong>解决这个问题。这会有新的问题：</p>\n<ul>\n<li>代码杂乱无章</li>\n<li>没有合适的规范，每个人都可能会任意命名、模块名称可能相同</li>\n<li>必须记得每一个<strong>模块返回对象命名的问题</strong>，才能在其他模块中正确的使用</li>\n</ul>\n<p>  因此，commonJS规范问世</p>\n<h4>CommonJS规范</h4>\n<p>  CommonJS具备以下特点：</p>\n<ul>\n<li>每一个JS文件都是一个单独的模块</li>\n<li>模块中包含CommonJS规范的核心变量：exports、 module.exports、require</li>\n<li>使用核心变量，进行模块化开发</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//在a.js中导出变量</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"不要秃头啊\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//或者：</span>\nexports<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"不要秃头啊\"</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//在b.js中引用导出的变量</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> name <span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">)</span></code></pre></div>\n<h4>ES Module规范</h4>\n<p>  从<strong>ES 6</strong>开始，JavaScript才有真正意义上模块化规范</p>\n<p>  ES Module产生的优势有很多，比如：</p>\n<ul>\n<li>借助ES Module的静态导入导出优势，实现tree shaking</li>\n<li>使用import()懒加载的方式实现代码分割</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n* 导出\n*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//重定向导出 不包括 module内的default</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重定向命名导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> import1 <span class=\"token keyword\">as</span> name1<span class=\"token punctuation\">,</span> import2 <span class=\"token keyword\">as</span> name2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重定向重命名导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与之前声明的变量名绑定 命名导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> variable1 <span class=\"token keyword\">as</span> name1<span class=\"token punctuation\">,</span> variable2 <span class=\"token keyword\">as</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重命名导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> name1 <span class=\"token operator\">=</span> <span class=\"token string\">'name1'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明命名导出 或者 var, const，function， function*, class</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> expression<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 或者 function*, class</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">name1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 或者 function*, class</span>\n\n<span class=\"token comment\">/**\n* 导入\n*/</span>\n<span class=\"token keyword\">import</span> defaultExport <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认导入</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//解构导入</span>\n<span class=\"token keyword\">import</span> defaultExport<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">as</span> newC <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//混合导入</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> name <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//混合导入</span>\n<span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//动态导入(异步导入)</span></code></pre></div>\n<h4>CommonJS模块化实现原理</h4>\n<ul>\n<li>定义对象modules，用来存放模块化的源代码</li>\n<li>定义缓存对象cache</li>\n<li>\n<p>定义require函数</p>\n<ul>\n<li>判断缓存中是否已加载过</li>\n<li>给定义的module变量和cache[moduledId]赋值同一个对象</li>\n<li>加载执行模块 给module.exports赋值</li>\n<li>导出module.exports</li>\n</ul>\n</li>\n<li>执行入口函数</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//模块定义</span>\n<span class=\"token keyword\">var</span> modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"./src/name.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"不要秃头啊\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//接受模块的路径为参数，返回具体的模块的内容</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">modulePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> cachedModule <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>modulePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取模块缓存</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedModule <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//如果有缓存则不允许模块内容，直接retuen导出的值</span>\n    <span class=\"token keyword\">return</span> cachedModule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//如果没有缓存，则定义module对象，定义exports属性</span>\n  <span class=\"token comment\">//这里注意！！！module = cache[modulePath] 代表引用的是同一个内存地址</span>\n  <span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>modulePath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//运行模块内的代码，在模块代码中会给module.exports对象赋值</span>\n  modules<span class=\"token punctuation\">[</span>modulePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//导入module.exports对象</span>\n  <span class=\"token keyword\">return</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> author <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/name.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ES Module和commonJS可以互相混用吗</h4>\n<ol>\n<li>ES Module可以直接通过import引入commonJS</li>\n<li>commonJS不能通过require引入ES Module，经过babel转</li>\n</ol>\n<h4>commonJS和esModule的区别</h4>\n<ul>\n<li>commonJS是被加载的时候运行，esModule是编译的时候运行</li>\n<li>commonJSS输出的是值的浅拷贝， esModule输出值的引用</li>\n<li>commonJS具有缓存，在第一次加载时，会完整运行整个文件并输出一个对象，浅拷贝在内存中，下次加载文件时，直接从内存中取值</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/*************** a.js**********************/</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nexports<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出值的拷贝</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//这里改变count值，并不会将module.exports对象的count属性值改变</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*************** b.js**********************/</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//在支持es6模块的环境下等同于</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.js'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">//0</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/*************** a.js**********************/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出的是值的引用，指向同一块内存</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此时引用指向的内存值发生改变</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/*************** b.js**********************/</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.js'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">//0</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span></code></pre></div>","frontmatter":{"title":"模块化","date":"October 30, 2022","description":"模块化发展"}},"previous":{"fields":{"slug":"/live/blob视频地址/"},"frontmatter":{"title":"为什么视频网站的视频链接地址是blob"}},"next":{"fields":{"slug":"/foundamention/CDN/"},"frontmatter":{"title":"CDN"}}},"pageContext":{"id":"6abe76b5-490d-59f6-a195-0f2455825bc0","previousPostId":"318736b2-8a29-551b-a4c1-4ea6c9add636","nextPostId":"4b948428-2121-52a4-a8c9-2a3fd9bc817f"}},"staticQueryHashes":["2841359383","788015585"]}