{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/react/diff/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"718269df-ceb7-5cbf-be46-610502f8059d","excerpt":"React diff算法是深度优先遍历的比较算法，用于当状态变更时，比较新旧虚拟dom树，局部更新变化的节点，提高渲染效率。 为了优化react diff算法的复杂度，react根据经验提出三点前提： 跨层级的移动dom场景较少，可忽略不计 两种不同类型的元素会产生不同的树 3.开发者可以通过key…","html":"<p>React diff算法是深度优先遍历的比较算法，用于当状态变更时，比较新旧虚拟dom树，局部更新变化的节点，提高渲染效率。</p>\n<p>为了优化react diff算法的复杂度，react根据经验提出三点前提：</p>\n<ol>\n<li>跨层级的移动dom场景较少，可忽略不计</li>\n<li>两种不同类型的元素会产生不同的树</li>\n<li>3.开发者可以通过key属性来告知哪些元素可以在不同的渲染下保持不变。</li>\n</ol>\n<p>依据这三点，有三种比较策略</p>\n<ol>\n<li>树比较，tree diff 不同的元素类型的树直接替换，不再遍历子节点</li>\n<li>component diff：可以通过key来告知哪些组件需要刷新</li>\n<li>element diff: 处理文本替换</li>\n</ol>\n<p>优点：降低diff复杂度，由原来O(n^3)降低到O(n)\n缺点：</p>\n<h2>Diff算法</h2>\n<p>  具体流程：</p>\n<ul>\n<li>真实dom与虚拟dom之间存在一个映射关系，这个映射关系依靠初始化是的JSX建立完成</li>\n<li>当虚拟dom发生变化后，就会根据差距计算生成patch，这个patch是一个结构化数据，内容包含了增加、更新、移除等；</li>\n<li>最后再根据patch去更新真实的dom，反馈到用户的界面上</li>\n</ul>\n<h4>更新时机</h4>\n<p>  触发更新、进行差异对比的时机。更新发生在setState、Hooks等调用操作后。</p>\n<h4>遍历算法</h4>\n<p>  diff 算法采用了<strong>深度优先遍历算法</strong>。因为广度优先遍历可能会导致组件的生命周期时序错乱，而深度优先遍历算法就可以解决这个问题</p>\n<h4>优化策略</h4>\n<p>  React分别从<strong>树、组件及元素</strong>三个层面进行复杂度优化</p>\n<ol>\n<li>树比对，<strong>忽略节点跨层级操作的场景</strong>。树比对的手法是非常暴力的，两棵树只对同一层次的节点进行比较，如果节点已经不存在了，该节点及其子节点会被完全删掉，不会用于进一步对比</li>\n<li>如果组件的类型一致，则默认为相似的树结构，否则默认为不同的树结构</li>\n<li>同一层级的子节点，可以通过标记key的方式进行对比</li>\n</ol>\n<p>  React 16引入的<strong>Fiber设计</strong>，Fiber机制下节点与树分别采用FiberNode与FiberTree进行重构。FiberNode采用双链表的结构，可以直接找到兄弟节点与子节点，使得整个更新过程可以暂停恢复。</p>\n<p>  Fiber机制下，整个更新过程由current与workInProgress两株树双缓冲完成，当workInProgress更新完成后，通过修改current相关指针指向的节点，直接抛弃老树</p>\n<p>  <img src=\"https://s0.lgstatic.com/i/image2/M01/04/31/CgpVE1_q2zGAe9UzAACKAZViwbM237.png\" alt=\"proto\"></p>","frontmatter":{"title":"与其他框架相比，React 的 diff 算法有何不同","date":"February 22, 2022","description":null}},"previous":{"fields":{"slug":"/foundamention/react/fiber/"},"frontmatter":{"title":"React之about fiber"}},"next":{"fields":{"slug":"/foundamention/react/setState/"},"frontmatter":{"title":"React之setState"}}},"pageContext":{"id":"718269df-ceb7-5cbf-be46-610502f8059d","previousPostId":"60546cf2-65b3-5602-ab93-bdb589ea5d60","nextPostId":"98472e34-ae53-552f-b1ec-28bcfbeca44c"}},"staticQueryHashes":["2841359383","788015585"]}