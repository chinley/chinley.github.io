{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/事件循环/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"fb3071bf-3cb8-56a2-8675-92150a59d619","excerpt":"JavaScript…","html":"<p>JavaScript是一个单线程的脚本语言，所以在一行代码执行的过程中，必然不会存在同时执行的另一行代码。</p>\n<p>如果有些代码执行了大量的计算，比方在前端破解密码之类的操作，就会导致后续代码一直在等待，页面处于假死状态，因为前边的代码没有执行完。</p>\n<p>所以如果所有代码都是同步执行的，对于一些请求难道要一直循环代码去判断是否拿到了返回结果么，于是就有异步事件的概念。注册一个回调函数，比如说发一个网络请求，我们告诉主程序等到接收到数据后通知我，然后我们就可以去做其他事情了。</p>\n<p>然后在异步完成后，会通知我们，但是此时可能程序正在做其他事情，所以即使异步完成了也要在一旁等待，等到程序空闲下来才有时间去看哪些异步已经完成了，可以去执行。</p>\n<h4>微任务和宏任务的区别</h4>\n<p>多个宏任务合在一起可以认为有一个任务队列在这，任务队列中的都是已经完成的异步操作，在当前的微任务没有执行完成时，是不会执行下一个宏任务的。</p>\n<ul>\n<li>两者都是异步</li>\n<li>进程的切换肯定是宏任务，因为需要花费大量的资源</li>\n<li>线程的切换是微任务，只需要在一个进程中切换，更确切地说，微任务时<strong>纤程</strong>的切换导致的，纤程是比线程更小的概念</li>\n<li>为什么跟定时器有关的任务是宏任务？\n因为计时器是实时的，不能被阻塞，所以定时器被设计在另一个进程中被管理，所以定时器任务会有进程的切换。</li>\n<li>事件为什么是宏任务？\n事件的触发依赖于浏览器的实现，平台有其自己的事件注册和派发机制，事件的管理中心也一定是在另外一个进程中实现的。</li>\n</ul>\n<h4>宏任务</h4>\n<ul>\n<li>script整体代码</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>requestAnimationFrame</li>\n<li>I/O</li>\n</ul>\n<h4>微任务</h4>\n<ul>\n<li>Promise.then catch finally</li>\n<li>mutationObserver</li>\n</ul>\n<h4>什么是事件循环</h4>\n<p>  JavaScipt代码执行的过程中，除了依靠函数调用栈来确定函数的执行顺序外，还依靠任务队列来确定代码执行，整个执行过程称为事件循环过程。一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为宏任务与微任务。</p>\n<p>  <strong>所有的任务可以分为同步任务和异步任务。同步任务就是立即执行的任务，而异步任务就是异步执行的任务。异步任务会通过任务队列的机制来进行协调。每个宏任务执行完，都会检查有没有微任务，如果有，执行完所有的微任务再执行下一个宏任务。</strong></p>\n<h4>浏览器的事件循环</h4>\n<p>浏览器的事件循环由<strong>一个宏任务队列+多个微任务队列</strong>组成。</p>\n<p>首先，执行第一个宏任务：全局script脚本，产生的宏任务和微任务进入各自的队列中。执行完script后，把当前的微任务队列清空，完成一次事件循环。</p>\n<p>接着再取出一个宏任务，同样把在此期间产生的回调入队，再把当前的微任务队列清空。</p>\n<p><strong>宏任务队列只有一个，而每一个宏任务都有一个自己的微任务队列</strong>， 每轮循环都是由一个宏任务+多个微任务组成。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第一个回调函数：微任务1'</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第三个回调函数：宏任务2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第二个回调函数：宏任务1'</span><span class=\"token punctuation\">)</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'第四个回调函数：微任务2'</span><span class=\"token punctuation\">)</span>   \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 第一个回调函数：微任务1</span>\n<span class=\"token comment\">// 第二个回调函数：宏任务1</span>\n<span class=\"token comment\">// 第四个回调函数：微任务2</span>\n<span class=\"token comment\">// 第三个回调函数：宏任务2</span></code></pre></div>","frontmatter":{"title":"事件循环，宏任务与微任务","date":"February 22, 2022","description":null}},"previous":{"fields":{"slug":"/foundamention/react/setState/"},"frontmatter":{"title":"React之setState"}},"next":{"fields":{"slug":"/foundamention/call和apply/"},"frontmatter":{"title":"js深入之call和apply的模拟实现"}}},"pageContext":{"id":"fb3071bf-3cb8-56a2-8675-92150a59d619","previousPostId":"98472e34-ae53-552f-b1ec-28bcfbeca44c","nextPostId":"ecbaa1cb-7843-5359-b4f7-2462ec170b66"}},"staticQueryHashes":["2841359383","788015585"]}