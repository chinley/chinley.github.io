{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/闭包/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"b64c0007-3658-5f9b-a020-3ba1d09393d3","excerpt":"什么是闭包   闭包是指那些能访问自由变量（在函数中使用的既不是函数局部的变量，又不是函数参数的变量）的函数   闭包 = 函数 + 自由变量   ECMAScript…","html":"<h4>什么是闭包</h4>\n<hr>\n<p>  闭包是指那些能访问自由变量（在函数中使用的既不是函数局部的变量，又不是函数参数的变量）的函数</p>\n<p>  闭包 = 函数 + 自由变量</p>\n<p>  ECMAScript中，闭包指的是：</p>\n<p>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n从实践角度：以下函数才算是闭包：</p>\n<ul>\n<li>即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）</li>\n<li>在代码中引用了自由变量</li>\n</ul>\n<h4>代码示例</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"local scope\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>f函数执行的时候，尽管checkscope的执行上下文已经从执行上下文栈中弹出，checkscopeContext被销毁了，但f函数的执行上下文维护的作用域还是记录了checkscope的活动变量\nfStack = [VO, checkscopeContext.VO, globalContext.VO]</p>","frontmatter":{"title":"js深入之闭包","date":"February 12, 2022","description":null}},"previous":{"fields":{"slug":"/foundamention/变量对象/"},"frontmatter":{"title":"js深入之变量对象"}},"next":{"fields":{"slug":"/foundamention/防抖与节流/"},"frontmatter":{"title":"防抖与节流"}}},"pageContext":{"id":"b64c0007-3658-5f9b-a020-3ba1d09393d3","previousPostId":"5b0faae5-1cef-5617-ac4b-59c7d864ff75","nextPostId":"63173176-cd8b-5b9b-9873-5232613e412b"}},"staticQueryHashes":["2841359383","788015585"]}