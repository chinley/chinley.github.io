{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/闭包/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"b64c0007-3658-5f9b-a020-3ba1d09393d3","excerpt":"什么是闭包   闭包是指那些能访问自由变量（在函数中使用的既不是函数局部的变量，又不是函数参数的变量）的函数   闭包 = 函数 + 自由变量   ECMAScript…","html":"<h4>什么是闭包</h4>\n<hr>\n<p>  闭包是指那些能访问自由变量（在函数中使用的既不是函数局部的变量，又不是函数参数的变量）的函数</p>\n<p>  闭包 = 函数 + 自由变量</p>\n<p>  ECMAScript中，闭包指的是：</p>\n<p>从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n从实践角度：以下函数才算是闭包：</p>\n<ul>\n<li>即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）</li>\n<li>\n<p>在代码中引用了自由变量</p>\n<p>在MDN的解释中，闭包是一个函数以及其捆绑的周边环境状态的引用的组合。闭包让开发者可以从内部函数访问外部函数的作用域</p>\n</li>\n</ul>\n<h4>代码示例</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'chinley'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>init创建了一个局部变量name和一个名为displayName的函数。displayName是定义在init里的内部函数，并且仅在init函数体内可用。<strong>displayName没有自己的局部变量，但它可以访问到外部函数的变量</strong>， 所以displayName可以使用init中声明的变量name。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"local scope\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>f函数执行的时候，尽管checkscope的执行上下文已经从执行上下文栈中弹出，checkscopeContext被销毁了，但f函数的执行上下文维护的作用域还是记录了checkscope的活动变量\nfStack = [VO, checkscopeContext.VO, globalContext.VO]</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> add5 <span class=\"token operator\">=</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add5</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<h4>闭包的作用</h4>\n<ul>\n<li>用闭包模拟私有方法</li>\n<li>可以读取到函数内部的变量</li>\n<li>让变量始终保存在内存中</li>\n</ul>\n<h6>相关阅读</h6>\n<p><a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">「学习Javascript闭包（Closure）」- 阮一峰</a></p>","frontmatter":{"title":"JS深入之闭包","date":"February 12, 2022","description":null}},"previous":{"fields":{"slug":"/foundamention/变量对象/"},"frontmatter":{"title":"js深入之变量对象"}},"next":{"fields":{"slug":"/foundamention/react/diff/"},"frontmatter":{"title":"与其他框架相比，React 的 diff 算法有何不同"}}},"pageContext":{"id":"b64c0007-3658-5f9b-a020-3ba1d09393d3","previousPostId":"5b0faae5-1cef-5617-ac4b-59c7d864ff75","nextPostId":"718269df-ceb7-5cbf-be46-610502f8059d"}},"staticQueryHashes":["2841359383","788015585"]}