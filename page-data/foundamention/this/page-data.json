{"componentChunkName":"component---src-templates-blog-post-js","path":"/foundamention/this/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"c97ac41a-7667-57a8-9a1f-db9f1464ab3b","excerpt":"相关阅读 JavaScript 的 this 原理 - 阮一峰 this指向问题 首先来看下面的例子，不同的写法，可能有不同的结果 造成不同结果的原因，在于函数里使用到了this,obj.foo()是在obj的环境执行，因此拿到的是obj的bar。而一旦var foo = obj.foo, foo…","html":"<h5>相关阅读</h5>\n<p><a href=\"https://www.ruanyifeng.com/blog/2018/06/javascript-this.html\">JavaScript 的 this 原理 - 阮一峰</a></p>\n<h2>this指向问题</h2>\n<p>首先来看下面的例子，不同的写法，可能有不同的结果</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>造成不同结果的原因，在于函数里使用到了this,obj.foo()是在obj的环境执行，因此拿到的是obj的bar。而一旦var foo = obj.foo, foo()就变成在全局环境执行。</p>\n<p>那函数的运行环境到底是怎么决定的？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的代码将一个对象赋值给变量obj，JS引擎会先在内存里生成一个对象{foo: 5},再把内存地址赋值给obj。\n原始的对象以字典结构保存，每一个属性名都对应一个属性描述对象。上面例子的foo属性，实际上是以下面的形式存在的：\nobj -> foo -> [[value]]:5 [[writable]]:true [[enumerable]]: true [[configurable]]: true</p>\n<p>那如果属性的值是一个函数，like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这时引擎会将函数单独保存在内存中，然后再将函数的地址赋值给foo属性value属性\n<img src=\"https://www.wangbase.com/blogimg/asset/201806/bg2018061803.png\" alt=\"hw-os-app\">\n由于函数是一个单独的值，所以它可以在<strong>不同的环境（上下文）执行</strong>， 而this就是用于<strong>在函数体内部获得当前的运行环境</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  f<span class=\"token operator\">:</span>f<span class=\"token punctuation\">,</span>\n  x<span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//单独执行</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">//obj环境执行</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>上述代码中，函数f在全局环境执行，this.x指向全局环境的x\n<img src=\"https://www.wangbase.com/blogimg/asset/201806/bg2018061804.png\" alt=\"hw-os-app\">\n在obj环境执行，this.x指向obj.x\n<img src=\"https://www.wangbase.com/blogimg/asset/201806/bg2018061805.png\" alt=\"hw-os-app\"></p>\n<h2>this上下文</h2>\n<h3>全局上下文</h3>\n<p>无论是否在严格模式下，在<strong>全局执行环境</strong>中(在任何函数体外部)，this都指向全局对象, 严格模式时指向undefined，非严格模式下，自动指向全局对象（浏览器中就是window）</p>\n<h3>函数上下文</h3>\n<p><strong>在函数内部</strong>，this的值取决于函数被调用的方式。\n函数的调用方式有哪些：</p>\n<ul>\n<li>在全局环境或是普通函数中直接调用</li>\n<li>作为对象的方法</li>\n<li>使用apply和call</li>\n<li>作为构造函数</li>\n</ul>\n<h4>直接调用</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj  <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a\n        <span class=\"token punctuation\">}</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \nobj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></code></pre></div>\n<p>fun函数虽然在obj.b方法中定义，但它还是一个普通函数，直接调用在非严格模式下指向全局对象。\n<strong>当函数独立调用的时候，在严格模式下它的this指向undefined，在非严格模式下，当this指向undefined的时候，自动指向全局对象(浏览器中就是window)。</strong></p>\n<h4>作为对象的方法</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span>\n<span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></code></pre></div>\n<p>作为对象的方法调用-〉obj.b(),这个时候this指向调用它的对象，就是obj。var t = obj.b时，这个时候就不是作为对象的方法调用，相当于函数独立调用。</p>\n<h4>使用call和apply</h4>\n<p>改变函数执行上下文</p>\n<h4>作为构造函数</h4>\n<p>this代表它即将new出来的对象</p>\n<h4>箭头函数</h4>\n<p>箭头函数，不可以用call和apply改变this</p>","frontmatter":{"title":"JS之this","date":"October 30, 2021","description":"about this"}},"previous":{"fields":{"slug":"/leetcode/tree/"},"frontmatter":{"title":"JS中的树数据结构"}},"next":{"fields":{"slug":"/leetcode/bag/"},"frontmatter":{"title":"动态规划之背包问题"}}},"pageContext":{"id":"c97ac41a-7667-57a8-9a1f-db9f1464ab3b","previousPostId":"1eee51d5-b225-53de-9f2f-fb1eef872e20","nextPostId":"3552c50b-d4ae-57dd-93ac-4e899f124f6f"}},"staticQueryHashes":["2841359383","788015585"]}