{"componentChunkName":"component---src-templates-blog-post-js","path":"/leetcode/岛屿问题/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"d2161470-6640-54e4-b01b-c85a2ad6be0b","excerpt":"相关阅读 岛屿类问题的通用解法、DFS 遍历框架 https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/ 网格类问题的DFS…","html":"<h6>相关阅读</h6>\n<p>岛屿类问题的通用解法、DFS 遍历框架</p>\n<p><a href=\"https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/\">https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/</a></p>\n<h2>网格类问题的DFS遍历方法</h2>\n<h4>网格问题的基本概念</h4>\n<p>  网格问题是由一个mxn个小方格组成一个网格，每个小方格与其上下左右四个方格认为是相邻的，要在这样的网格上进行搜索。\n岛屿问题是一类典型的网格问题，每个格子中的数字可能是0或者1，把数字1看作是陆地，0是海洋，相邻的陆地格子就连接成一个岛屿。</p>\n<p>  <img src=\"https://pic.leetcode-cn.com/c36f9ee4aa60007f02ff4298bc355fd6160aa2b0d628c3607c9281ce864b75a2.jpg\" alt=\"proto\"></p>\n<p>  岛屿问题基本都用DFS遍历解决</p>\n<h4>DFS的基本结构</h4>\n<p>  网格结构要二叉树结构稍微复杂，它其实是一种简化的图结构。网格的DFS遍历，可以通过二叉树DFS遍历来类比。</p>\n<p>  二叉树遍历一般是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">TreeNode root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  可以看出，二叉树的DFS有两个要素：<strong>访问相邻节点</strong>和<strong>判断base</strong></p>\n<p>  对于网格的DFS，可以参考二叉树的DFS,写出网格的两个要素：</p>\n<p>  首先，网格有多少个相邻节点？</p>\n<p>  答案是上下左右四个。对于格子(r,c)来说，四个相邻的格子分别是(r-1,c)、(r+1,c)、(r,c-1)、(r,c+1)。换句话说，网格结构是四叉的</p>\n<p>  其次，网格DFS中的base是什么？从二叉树的base中对应过来，就是网格中不需要继续便利、grid[r][c]会数组下标越界异常的格子，也就是超出范围的格子。</p>\n<p>  因此，能得出初步的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> r <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>如何避免重复遍历</h4>\n<p>  标记已经遍历过的棋子；\n0 — 海洋\n1 — 陆地（未遍历过）\n2 — 陆地（已遍历）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> r <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>岛屿问题例题</h4>\n<ul>\n<li>岛屿的最大面积 <a href=\"https://leetcode.cn/problems/max-area-of-island/\">https://leetcode.cn/problems/max-area-of-island/</a></li>\n<li>岛屿的周长 <a href=\"https://leetcode.cn/problems/island-perimeter/\">https://leetcode.cn/problems/island-perimeter/</a></li>\n<li>岛屿数量 <a href=\"https://leetcode.cn/problems/number-of-islands/\">https://leetcode.cn/problems/number-of-islands/</a></li>\n<li>统计子岛屿 <a href=\"https://leetcode.cn/problems/count-sub-islands/\">https://leetcode.cn/problems/count-sub-islands/</a></li>\n</ul>","frontmatter":{"title":"岛屿类问题的通用解法","date":"July 20, 2022","description":"算法之岛屿类问题"}},"previous":{"fields":{"slug":"/foundamention/react/渲染流程/"},"frontmatter":{"title":"如何解释 React 的渲染流程"}},"next":{"fields":{"slug":"/live/lowCode/"},"frontmatter":{"title":"lowcode--占坑"}}},"pageContext":{"id":"d2161470-6640-54e4-b01b-c85a2ad6be0b","previousPostId":"7658b6e1-bf53-540d-a7c4-347dcf5499db","nextPostId":"f5803f95-d3e1-50c3-971d-9e1725bd3cf5"}},"staticQueryHashes":["2841359383","788015585"]}