{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"c879389e-4f3c-5971-8522-f7e0f0b3b820","excerpt":"webpack 模块打包工具 为什么需要webpack   1.解决浏览器兼容问题\n  2.将散落的模块打包到一起，解决频繁请求的问题\n  3.支持将不同的资源，例如图片、字体等作为模块调用，便于维护与处理业务 模块打包   1.定义打包入口 entry, entry内部默认是只能处理javascript代码…","html":"<h1>webpack 模块打包工具</h1>\n<h2>为什么需要webpack</h2>\n<p>  1.解决浏览器兼容问题\n2.将散落的模块打包到一起，解决频繁请求的问题\n3.支持将不同的资源，例如图片、字体等作为模块调用，便于维护与处理业务</p>\n<h2>模块打包</h2>\n<p>  1.定义打包入口 entry, entry内部默认是只能处理javascript代码\n2.配置打包出口 output\n3.三种配置模式：\n1.development: 自动优化加载速度，添加辅助工作的插件\n2.production: 自动优化打包结果，打包速度偏慢\n3.node: 不作任何操作</p>\n<h2>loader机制：实现特殊资源加载</h2>\n<p>  css-loader只把css模块加载到js中，并不会使用这个模块\nstyle-loade把css-loader转换后的结果通过追加style的方式加载到页面上\n一旦配置多个 Loader，执行顺序是从后往前执行的</p>\n<h2>插件机制：增强webpack自动化构建的能力</h2>\n<h3>常用插件</h3>\n<p>  clean-webpack-plugin: 实现自动在打包之前清除 dist 目录（上次的打包结果）</p>","frontmatter":{"title":"webpack学习","date":"May 18, 2021","description":"学习笔记: about webapck"}},"previous":{"fields":{"slug":"/how-browser-work/"},"frontmatter":{"title":"现代浏览器架构"}},"next":{"fields":{"slug":"/webpack/treeshaking/"},"frontmatter":{"title":"babel"}}},"pageContext":{"id":"c879389e-4f3c-5971-8522-f7e0f0b3b820","previousPostId":"be5763ce-eaa7-5e96-bcba-ac3ef1e67cd0","nextPostId":"63d12349-74f1-5d0e-ae13-558b2b3e9e61"}},"staticQueryHashes":["2841359383","788015585"]}