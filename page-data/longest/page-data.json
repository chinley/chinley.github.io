{"componentChunkName":"component---src-templates-blog-post-js","path":"/longest/","result":{"data":{"site":{"siteMetadata":{"title":"chinley's blog"}},"markdownRemark":{"id":"3b497cfb-33ee-5287-ba3b-a59d07048e2c","excerpt":"最长回文字符串   从下标i为1开始遍历字符串str，以stri为中心扩展查找最长字符串","html":"<h3>最长回文字符串</h3>\n<p>  从下标i为1开始遍历字符串str，以str[i]为中心扩展查找最长字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var find = function(start, end, s) {\n  while(start &gt;= 0 &amp;&amp; end &lt; s.length &amp;&amp; s[start] === s[end] &amp;&amp; start &lt;= end) {\n      start-=1;\n      end+=1;\n  }\n  return [start+1, end-1]; // 因为退出while循环时s[start] ！== s[end]，因此需要回退上一个值\n}\n\nvar max = function(start1, end1, start2, end2) {\n  return (end1 - start1) &gt; (end2 - start2) ? [start1, end1] : [start2, end2];\n}\n\nvar longestPalindrome = function(s) {\n  if(s.length == 1) {\n      return s;\n  }\n  let len = s.length - 1;\n  let start = 0, end = 0;\n  for(let i= 1;i&lt;=len;i++) {\n      const [start1, end1] = find(i,i,s);\n      const [start2, end2] = find(i-1, i, s);\n      const [maxStart, maxEnd] = max(start1, end1, start2, end2);\n      if((maxEnd - maxStart) &gt;= (end - start)) {\n          start = maxStart;\n          end = maxEnd;\n      }\n  }\n  return s.substring(start, end+1); // substring不包含end下标的值，因此需要+1\n};</code></pre></div>","frontmatter":{"title":"最长回文字符串","date":"May 23, 2021","description":"算法题：最长回文字符串"}},"previous":{"fields":{"slug":"/webpack/"},"frontmatter":{"title":"webpack学习"}},"next":null},"pageContext":{"id":"3b497cfb-33ee-5287-ba3b-a59d07048e2c","previousPostId":"c879389e-4f3c-5971-8522-f7e0f0b3b820","nextPostId":null}},"staticQueryHashes":["2841359383","788015585"]}