{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/templates/index.js"],"names":["data","useStaticQuery","author","site","siteMetadata","description","className","S","layout","formats","src","width","height","quality","alt","summary","location","pageContext","siteTitle","title","posts","allMarkdownRemark","nodes","totalPage","currentPage","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","padding","rel"],"mappings":"y4BAwDA,IA7CY,WAAO,IAAD,IACVA,GAAOC,oBAAe,aActBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAW,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,YAE5C,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,yBACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,sBAUA,2BACE,yBACGT,GAAe,KADlB,KAIA,0BACGH,aAAA,EAAAA,EAAQa,UAAW,KADtB,S,mHC6CR,UAlFkB,SAAC,GAAqC,IAAD,EAAlCf,EAAkC,EAAlCA,KAAMgB,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC7BC,GAAY,UAAAlB,EAAKG,KAAKC,oBAAV,eAAwBe,QAAxB,QACZC,EAAQpB,EAAKqB,kBAAkBC,MAC7BC,EAA2BN,EAA3BM,UAAWC,EAAgBP,EAAhBO,YACnB,OAAqB,IAAjBJ,EAAMK,OAEN,gBAAC,IAAD,CAAQT,SAAUA,EAAUG,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQH,SAAUA,EAAUG,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,sBAAIO,MAAO,CAAEC,UAAU,SACpBP,EAAMQ,KAAI,SAAAC,GACT,IAAMV,EAAQU,EAAKC,YAAYX,OAASU,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE1B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYnB,KAG/B,6BAAQU,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYzB,aAAewB,EAAKa,SAE/CJ,SAAS,uBAQvB,uBACEZ,MAAO,CACPiB,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACflB,UAAU,OACVmB,QAAS,IAERtB,EAAc,EAAI,GACjB,gBAAC,EAAAY,KAAD,CACEC,GAAI,KAAOb,EAAc,GAAM,EAAI,GAAKA,EAAc,GACtDuB,IAAI,QAFN,SAODvB,EAAc,GAAKD,GAClB,gBAAC,EAAAa,KAAD,CAAMC,GAAI,KAAOb,EAAc,GAAIuB,IAAI,QAAvC,UAKJ,gBAAC,IAAD","file":"component---src-templates-index-js-fd9bdbb20515f17a0f0a.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          description\n        }\n      }\n    }\n  `)\n\n  const author = data.site.siteMetadata?.author;\n  const description = data.site.siteMetadata?.description\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/chinley.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      <div>        \n        <p>\n          {description || null}\n          {` `}\n        </p>\n        <p>\n          {author?.summary || null}\n          {` `}\n        </p>\n\n      </div>\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Clock from \"../components/clock\"\nimport Bear from \"../components/Bear\";\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const { totalPage, currentPage } = pageContext;\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <Clock />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <div \n        style={{\n        display: `flex`,\n        flexWrap: `wrap`,\n        justifyContent: `space-between`,\n        listStyle: `none`,\n        padding: 0,\n      }}>\n        {currentPage - 1 > 0 && (\n          <Link\n            to={'/' + (currentPage - 1 === 1 ? '' : currentPage - 1)}\n            rel=\"prev\"\n          >\n            ← 上一页\n          </Link>\n        )}\n        {currentPage + 1 <= totalPage && (\n          <Link to={'/' + (currentPage + 1)} rel=\"next\">\n            下一页 →\n          </Link>\n        )}\n      </div>\n      <Bear />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogIndexQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}